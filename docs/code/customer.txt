"""
customer.txt documentation

This module contains the definition for the Customer class. The class emulates a real-life bank customer, and has attributes and functions that store information about the the customer and their bank accounts, as well as functionality for opening bank accounts, checking balance, and withdrawing and depositing.

Example:
>>>from customer import Customer
>>>from checking_account import CheckingAccount
>>>from savings_account import SavingsAccount
>>>import random
>>>import datetime
>>>new_customer = Customer("John Doe", "11/11/1998", "123456789")
account number is 1037568309
>>>new_customer.get_name()
>>>John Doe

Attributes:
	None
Todo:
	None

"""
"""
class Customer(Person):
"""
Implementation of a bank customer
Attributes:
	_customer_number(int): a unique ID number generated randomly
	__customer_account_list(dict): a dictionary of account numbers as keys each with 
					account objects as values
"""

    def __init__(self, name, birthdate, phone_number):
	Args:
		name(str): the value to be assigned to _name
		birthdate(str): the value to be assigned to _birthdate
		phone_number(str): the value to be assigned to phone_number

def get_name(self):
	Args:
		None

def get_phone_number(self):
	Args:
		None

def set_name(self, newname):
	Args:
		newname(str): the new string that the _name attribute gets set to

def set_phone_number(self, new_phone_number):
	Args:
		new_phone_number(str): the new string that the _name attribute gets set to

def create_account(self, account_type):
	Args:
		account_type(str): the string that will determine which Account subclass to be 						created and stored in the customer_accounts_list attribute

def check_balance(self, account_number):
	Args:
		account_number(int): the randomly generated unique ID for an account; will be 
				used to look up entries in the customer_accounts_list attribute

def withdraw(self, account_number, amount):
	Args:
		account_number(int): the randomly generated unique ID for an account; will be 
				used to look up entries in the customer_accounts_list attribute
		amount(float): a float that will be used to subtract from the account balance

def deposit(self, account_number, amount):
	Args:
		account_number(int): the randomly generated unique ID for an account; will be 
				used to look up entries in the customer_accounts_list attribute
		amount(float): a float that will be used to add to the account balance
def __str__(self):
	Args:
		None
	



