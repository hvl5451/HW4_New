"""
account.txt documentation

This module contains the definition for the Account class. The class emulates a
real-life bank account, with attributes and functions that store information about
the account and its holder, as well as withdrawal and deposit functionalities.

Example:
>>>from random import randint
>>>new_account = Account("John Doe", "01/01/17", "John Doe Savings 001", randint(1, 1000000))
>>>new_account.get_holder()
>>>John Doe
"""
"""
Attributes:
    None

Todo:
    None

"""
"""
class (object):
    """
    Implementation of a conventional bank account.

    Attributes:
        _holder (str): the holder of the account.

        _created_on(str):String representation of the account's creation date.

        _account_name (str):

        _account_number (int): the unique numerical identifier of the bank account.

        _account_type (str): A string denoting the type of the account
        (for this implementation, either savings or checking)

        _balance (double): The balance of the bank account.

    """

    def __init__(self, holder, created_on, account_name, account_number, account_type, balance=0.0):

        Args:
            holder (str): the value to be assigned to _holder
            created_on (str): the value to be assigned to _created_on
            account_name(str): the value to be assigned to _account_name

        """
        self.attr1 = param1
        self.attr2 = param2
        self.attr3 = param3  #: Doc comment *inline* with attribute

        #: list of str: Doc comment *before* attribute, with type specified
        self.attr4 = ['attr4']

        self.attr5 = None
        """str: Docstring *after* attribute, with type specified."""


    def get_holder(self):
      Args:
          None

    def get_created_on(self):
      Args:
          None

    def get_account_name(self):
      Args:
          None
      

    def get_account_number(self):
      Args:
          None

    def get_account_type(self):
      Args:
          None

    def get_balance(self):
      Args:
          None

    def update_balance(self, amount):
      Args:
          amount (double): the amount to be added/deducted from the account balance;
          Can take on a positive or a negative value
"""
